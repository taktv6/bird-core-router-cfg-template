################################################################################
#                                Routing Policy                                #
################################################################################

define AS_LOCAL = 12345;
define AGGREGATE_ROUTE = (<aggregate route community>);
define DUESSELDORF_ROUTE = (<duesseldorf route community>);
define FRANKFURT_ROUTE = (<frankfurt route community>);
define BERLIN_ROUTE = (<berlin route community>);
define GLOBAL_ROUTE = (<global route community>);
define METRO_ROUTE = (<metro route community>);
define ORIGINATE = (<originate route community>);

function community_in() {
	if DRAINED = 1 then
		return 0;
	bgp_local_pref = 10000;
	bgp_med = 0;
}

filter drain {
	reject;
}

filter accept_all {
        accept;
}

filter ibgp_in {
	if (GLOBAL_ROUTE ~ bgp_community) then {
		accept;
	}
	if (METRO_ROUTE ~ bgp_community) then {
		if (LOCAL_METRO ~ bgp_community) then {
			accept;
		}
		else {
			bgp_local_pref = 5;
			accept;
		}
	}
	accept;
}

function peer_ip_filter_in() {
        if DRAINED = 1 then
                return 0;

        if net ~ [
                        2001::/32{32,32},
                        2002::/16{16,16}
                ] then {
                return 1;
        }

        if net ~ [
                        3ffe::/16{16,128},
                        2001:db8::/32{32,128},
                        2a03:2260::/30{30,128},
                        2002::/16{16,128},
                        ::/8{8,128},
                        fe00::/9{9,128},
                        ff00::/8{8,128}
                ] then {
                return 0;
        }
        if net ~ [
                        2001::/32{32,32},
                        2002::/16{16,16},
                        2000::/3{10,48}
                ] then {
                return 1;
        }

	return 0;
}

function peer_ip_filter_out() {
	if net ~ [
		<prefixes to announce>
	] then {
		return 1;
	}
	return 0;
}

function set_originated_routes_as_path()
{
	if originate_aggregate_route() = 1 then {
		bgp_path.empty;
		bgp_path.prepend(AS_LOCAL);
	}
	if originate_metro_route() = 1 then {
		bgp_path.empty;
		bgp_path.prepend(AS_LOCAL);
	}
}

function tag_originated_routes()
{
	if originate_aggregate_route() = 1 then {
		bgp_community.add(AGGREGATE_ROUTE);
		bgp_community.add(LOCAL_METRO);
		bgp_community.add(ORIGINATE);
	}
	if originate_metro_route() = 1 then {
		bgp_community.add(METRO_ROUTE);
                bgp_community.add(LOCAL_METRO);
		bgp_community.add(ORIGINATE);
	}
}

filter ibgp_out {
	tag_originated_routes();
	accept;
}

function is_bogon()
{
        if net ~ [
                2001::/32{32,32},
                2002::/16{16,16}
                ] then {
                return 0;
        }

        if net ~ [
                3ffe::/16{16,128},
                2001:db8::/32{32,128},
                2002::/16{16,128},
                ::/8{8,128},
                fe00::/9{9,128},
                ff00::/8{8,128}
                ] then {
                return 1;
        }
        if net ~ [
                2001::/32{32,32},
                2002::/16{16,16},
                2000::/3{10,48}
                ] then {
                return 0;
        }
        return 1;
}

function ebgp_out(string rt_scope)
int path_prepend;
{
	if DRAINED = 1 then {
                return 0;
	}

	if ("bilateral-metro-transit" = rt_scope) || ("metro-transit-customer" = rt_scope) then {
                if is_bogon() = 1 then {
                        return 0;
                }
        }
        else {
                if peer_ip_filter_out() = 0 then {
                        return 0;
                }
        }

	set_originated_routes_as_path();
	tag_originated_routes();
	path_prepend = 0;

	if "global-transit" = rt_scope then {
		path_prepend = 3;
	}
	if "metro-transit" = rt_scope then {
		path_prepend = 3;
	}

	if "bilateral-metro-transit" = rt_scope then {
		if ORIGINATE ~ bgp_community then {
			path_prepend = 2;
		}
	}

	if path_prepend = 1 then {
		bgp_path.prepend(AS_LOCAL);
	}

	if path_prepend = 2 then {
		bgp_path.prepend(AS_LOCAL);
		bgp_path.prepend(AS_LOCAL);
	}

	if path_prepend = 3 then {
		bgp_path.prepend(AS_LOCAL);
		bgp_path.prepend(AS_LOCAL);
		bgp_path.prepend(AS_LOCAL);
	}

	if ("metro-transit" = rt_scope) || ("metro-peering" = rt_scope) then {
		if (ORIGINATE ~ bgp_community) then {
			if (LOCAL_METRO ~ bgp_community) then {
				return 1;
			}
			if METROIZED = 0 then {
				if (AGGREGATE_ROUTE ~ bgp_community) then {
					return 1;
				}
			}
		}
		return 0;
	}

	if "global-transit" = rt_scope || "global-peering" = rt_scope then {
		if (ORIGINATE ~ bgp_community) then {
			if (LOCAL_METRO ~ bgp_community) then {
				return 1;
			}
			if METROIZED = 0 then {
				if (AGGREGATE_ROUTE ~ bgp_community) then {
					return 1;
				}
				if (METRO_ROUTE ~ bgp_community) then {
					return 1;
				}
			}
		}
		return 0;
        }

	if "bilateral-metro-transit" = rt_scope || "metro-transit-customer" = rt_scope then {
		if (ORIGINATE ~ bgp_community) then {
			if (LOCAL_METRO ~ bgp_community) then {
				return 1;
			}
			if METROIZED = 0 then {
				if (AGGREGATE_ROUTE ~ bgp_community) then {
					return 1;
				}
			}
			return 0;
		}

		if (LOCAL_METRO ~ bgp_community) then {
			return 1;
		}
		return 0;
	}

	if "bilateral-global-transit" = rt_scope || "global-transit-customer" = rt_scope then {
		if (ORIGINATE ~ bgp_community) then {
			if METROIZED = 0 then {
				return 1;
			}
			else {
				if (LOCAL_METRO ~ bgp_community) then {
					return 1;
				}
			}
			return 0;
		}

		return 1;
	}
	return 0;
}

function ebgp_in(string rt_scope)
int lpref;
int rt_med;
int metroized;
{
	if peer_ip_filter_in() = 0 then {
		return 0;
	}

	if "global-transit" = rt_scope then {
                lpref = 500; rt_med = 0; metroized = 0;
	}
        if "metro-transit" = rt_scope then {
                lpref = 500; rt_med = 0; metroized = 1;
	}
	if "global-peer" = rt_scope then {
		lpref = 1000; rt_med = 0; metroized = 0;
	}
	if "metro-peer" = rt_scope then {
		lpref = 1000; rt_med = 0; metroized = 1;
	}
	if "px-global-peer" = rt_scope then {
		lpref = 1000; rt_med = 100; metroized = 0;
	}
	if "px-metro-peer" = rt_scope then {
		lpref = 1000; rt_med = 100; metroized = 1;
	}
	if "px-global-backup-peer" = rt_scope then {
		lpref = 1000; rt_med = 500; metroized = 0;
	}
	if "px-metro-backup-peer" = rt_scope then {
		lpref = 1000; rt_med = 500; metroized = 1;
	}
	if "route-server" = rt_scope then {
		lpref = 1000; rt_med = 1000; metroized = 1;
	}

	bgp_local_pref = lpref;
	bgp_med = rt_med;

	bgp_community.add(LOCAL_METRO);
	if metroized = 1 then {
		bgp_community.add(METRO_ROUTE);
	}
	else {
		if METROIZED = 1 then {
			bgp_community.add(METRO_ROUTE);
		}
		else {
			bgp_community.add(GLOBAL_ROUTE);
		}
	}
	return 1;
}

filter global_transit_in {
        if ebgp_in("global-transit") = 1 then
                accept;
        reject;
}

filter metro_transit_in {
        if ebgp_in("metro-transit") = 1 then
                accept;
        reject;
}

filter global_peer_in {
	if ebgp_in("global-peer") = 1 then
		accept;
	reject;
}

filter metro_peer_in {
        if ebgp_in("metro-peer") = 1 then
                accept;
        reject;
}

filter px_global_peer_in {
        if ebgp_in("px-global-peer") = 1 then
                accept;
        reject;
}

filter px_metro_peer_in {
        if ebgp_in("px-metro-peer") = 1 then
                accept;
        reject;
}

filter px_global_backup_peer_in {
        if ebgp_in("px-global-backup-peer") = 1 then
                accept;
        reject;
}

filter px_metro_backup_peer_in {
        if ebgp_in("px-metro-backup-peer") = 1 then
                accept;
        reject;
}

filter route_server_in {
        if ebgp_in("route-server") = 1 then
                accept;
        reject;
}

filter global_transit_out {
	if ebgp_out("global-transit") = 1 then
		accept;
	reject;
}

filter metro_transit_out {
	if ebgp_out("metro-transit") = 1then
                accept;
        reject;
}

filter global_peer_out {
	if ebgp_out("global-peering") = 1 then
                accept;
        reject;
}

filter metro_peer_out {
	if ebgp_out("metro-peering") = 1 then
                accept;
        reject;
}

filter bilateral_metro_transit_out {
	if ebgp_out("bilateral-metro-transit") = 1 then
                accept;
        reject;
}

filter metro_transit_customer_out {
	if ebgp_out("metro-transit-customer") = 1 then
                accept;
        reject;
}

filter bilateral_global_transit_out {
	if ebgp_out("bilateral-metro-transit") = 1 then
                accept;
        reject;
}

filter global_transit_customer_out {
	if ebgp_out("global-transit-customer") = 1 then
                accept;
        reject;
}

filter community_out {
	if DRAINED = 1 then
		reject;
	if net = ::/0 then
		accept;
	reject;
}

